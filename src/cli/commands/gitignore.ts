import { join } from "node:path";
import { fileExists, readFileContent, writeFileContent } from "../../utils/file.js";
import { logger } from "../../utils/logger.js";

export const gitignoreCommand = async (): Promise<void> => {
  const gitignorePath = join(process.cwd(), ".gitignore");

  const rulesFilesToIgnore = [
    "# Generated by rulesync - AI tool configuration files",
    "**/.amazonq/",
    "**/.github/copilot-instructions.md",
    "**/.github/instructions/",
    "**/.cursor/",
    "**/.cursorignore",
    "**/.clinerules/",
    "**/.clineignore",
    "**/CLAUDE.md",
    "**/.claude/memories/",
    "**/.claude/commands/",
    "**/.claude/agents/",
    "**/.claude/settings.local.json",
    "**/AGENTS.md",
    "**/.agents/",
    "**/.roo/rules/",
    "**/.rooignore",
    "**/.copilotignore",
    "**/GEMINI.md",
    "**/.gemini/memories/",
    "**/.gemini/commands/",
    "**/.gemini/subagents/",
    "**/QWEN.md",
    "**/.qwen/memories/",
    "**/.aiexclude",
    "**/.aiignore",
    "**/.augmentignore",
    "**/.kiro/steering/",
    "**/.augment/rules/",
    "**/.augment-guidelines",
    "**/.junie/guidelines.md",
    "**/.noai",
    "**/.opencode/memories/",
    "**/.opencode/commands/",
    "**/opencode.json",
    "**/.mcp.json",
    "**/.cursor/mcp.json",
    "**/.cline/mcp.json",
    "**/.roo/mcp.json",
    "**/.roo/subagents/",
    "**/.vscode/mcp.json",
    "**/.github/commands/",
    "**/.github/subagents/",
    "**/.warp/",
    "**/WARP.md",
    "**/.codexignore",
    "**/.codex/",
  ];

  let gitignoreContent = "";

  if (await fileExists(gitignorePath)) {
    gitignoreContent = await readFileContent(gitignorePath);
  }

  const linesToAdd: string[] = [];

  for (const rule of rulesFilesToIgnore) {
    if (!gitignoreContent.includes(rule)) {
      linesToAdd.push(rule);
    }
  }

  if (linesToAdd.length === 0) {
    logger.success(".gitignore is already up to date");
    return;
  }

  const newContent = gitignoreContent
    ? `${gitignoreContent.trimEnd()}\n\n${linesToAdd.join("\n")}\n`
    : `${linesToAdd.join("\n")}\n`;

  await writeFileContent(gitignorePath, newContent);

  logger.success(`Added ${linesToAdd.length} rules to .gitignore:`);
  for (const line of linesToAdd) {
    if (!line.startsWith("#")) {
      logger.info(`  ${line}`);
    }
  }
};

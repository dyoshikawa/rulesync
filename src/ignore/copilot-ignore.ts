import { readFile } from "node:fs/promises";
import { basename } from "node:path";
import { RulesyncIgnore } from "./rulesync-ignore.js";
import { ToolIgnore, ToolIgnoreFromRulesyncIgnoreParams, ToolIgnoreParams } from "./tool-ignore.js";

export type CopilotIgnoreParams = ToolIgnoreParams;

/**
 * GitHub Copilot Ignore implementation
 *
 * Note: GitHub Copilot does not use traditional ignore files like .gitignore.
 * Instead, it uses the "Content Exclusion" feature managed through GitHub's Web UI.
 * This implementation generates YAML configuration that can be pasted into:
 * - Repository Settings → Copilot → Content exclusion
 * - Organization Settings → Copilot → Content exclusion
 * - Enterprise Settings → Copilot → Content exclusion
 *
 * Key features:
 * - YAML list format: - "pattern"
 * - Supports repository, organization, and enterprise levels
 * - Uses fnmatch-compliant patterns (case insensitive)
 * - No negation patterns supported by GitHub Copilot
 * - Configuration through GitHub Web UI only
 *
 * Output format examples:
 * Repository level:
 * - "/src/some-dir/kernel.rs"
 * - "secrets.json"
 * - "*.cfg"
 *
 * Organization/Enterprise level:
 * "*":
 *   - "/home/runner/.ssh/**"
 * "https://github.com/org/repo.git":
 *   - "/internal/**"
 */
export class CopilotIgnore extends ToolIgnore {
  constructor({ patterns, ...rest }: CopilotIgnoreParams) {
    super({
      patterns,
      ...rest,
    });
  }

  /**
   * Convert to RulesyncIgnore format
   */
  toRulesyncIgnore(): RulesyncIgnore {
    return new RulesyncIgnore({
      baseDir: ".",
      relativeDirPath: ".rulesync/ignore",
      relativeFilePath: `${basename(this.relativeFilePath, ".yml")}.md`,
      frontmatter: {
        targets: ["copilot"],
        description: `Generated from GitHub Copilot content exclusion configuration: ${this.relativeFilePath}`,
      },
      body: this.patterns.join("\n"),
      fileContent: this.patterns.join("\n"),
    });
  }

  /**
   * Generate YAML content exclusion configuration for GitHub Web UI
   * @param repositoryUrl Optional repository URL for organization/enterprise level config
   * @returns YAML string ready to paste into GitHub Web UI
   */
  generateContentExclusionYaml(repositoryUrl?: string): string {
    if (!repositoryUrl) {
      // Repository-level configuration (simple list)
      return this.patterns.map((pattern) => `- "${this.escapeYamlString(pattern)}"`).join("\n");
    }

    // Organization/Enterprise level configuration with repository mapping
    const yamlLines = [`"${this.escapeYamlString(repositoryUrl)}":`];
    for (const pattern of this.patterns) {
      yamlLines.push(`  - "${this.escapeYamlString(pattern)}"`);
    }
    return yamlLines.join("\n");
  }

  /**
   * Escape YAML string to handle special characters
   */
  private escapeYamlString(str: string): string {
    // Handle double quotes and other YAML special characters
    return str.replace(/"/g, '\\"');
  }

  /**
   * Generate file content in YAML format for content exclusion
   */
  generateIgnoreContent(repositoryUrl?: string): string {
    const header = [
      "# GitHub Copilot Content Exclusion Configuration",
      "# Generated by rulesync - paste this into GitHub Web UI:",
      "# Repository Settings → Copilot → Content exclusion",
      "# Or Organization/Enterprise Settings → Copilot → Content exclusion",
      "",
      "# YAML Configuration:",
      "",
    ];

    return header.join("\n") + this.generateContentExclusionYaml(repositoryUrl);
  }

  /**
   * Override getFileContent to generate YAML format
   */
  getFileContent(): string {
    return this.generateIgnoreContent();
  }

  /**
   * Create CopilotIgnore from RulesyncIgnore
   * Converts unified rulesync format to GitHub Copilot YAML format
   */
  static fromRulesyncIgnore({
    baseDir = ".",
    relativeDirPath,
    rulesyncIgnore,
  }: ToolIgnoreFromRulesyncIgnoreParams): CopilotIgnore {
    const body = rulesyncIgnore.getBody();

    // Extract patterns from body (split by lines and filter empty lines/comments)
    const patterns = body
      .split("\n")
      .map((line) => line.trim())
      .filter((line) => line.length > 0 && !line.startsWith("#"))
      // Filter out negation patterns as GitHub Copilot doesn't support them
      .filter((line) => !line.startsWith("!"));

    const copilotIgnore = new CopilotIgnore({
      baseDir,
      relativeDirPath,
      relativeFilePath: "copilot-content-exclusion.yml",
      patterns,
      fileContent: "", // Will be generated by getFileContent()
    });

    return copilotIgnore;
  }

  /**
   * Create CopilotIgnore from file path
   * Note: This is theoretical as Copilot doesn't use file-based ignore
   */
  static async fromFilePath({ filePath }: { filePath: string }): Promise<CopilotIgnore> {
    const fileContent = await readFile(filePath, "utf-8");

    // Parse patterns from file content (assuming gitignore-style format)
    const patterns = fileContent
      .split("\n")
      .map((line) => line.trim())
      .filter((line) => line.length > 0 && !line.startsWith("#"))
      // Filter out negation patterns
      .filter((line) => !line.startsWith("!"));

    const filename = basename(filePath);

    return new CopilotIgnore({
      baseDir: ".",
      relativeDirPath: ".github",
      relativeFilePath: filename,
      patterns,
      fileContent: "", // Will be generated
    });
  }

  /**
   * Get default patterns for GitHub Copilot content exclusion
   * Based on GitHub's recommendations and security best practices
   */
  static getDefaultPatterns(): string[] {
    return [
      // Security-sensitive files (highest priority for Copilot exclusion)
      ".env*",
      "*.pem",
      "*.key",
      "*.crt",
      "*.p12",
      "*.pfx",
      "secrets.json",
      "apikeys.txt",
      "/secret.env",
      "my/sensitive/dir/",

      // AWS credentials
      ".aws/**",
      "aws-exports.js",

      // Environment and configuration files
      "config/secrets/**",
      "**/database.yml",
      "production.env",

      // Build artifacts
      "build/**",
      "dist/**",
      "target/**",
      "out/**",

      // Dependencies
      "node_modules/**",
      ".pnpm-store/**",
      ".yarn/**",
      "vendor/**",

      // Logs and temporary files
      "*.log",
      "logs/**",
      "*.tmp",
      ".cache/**",

      // IDE and system files
      ".vscode/**",
      ".idea/**",
      "*.swp",
      "*.swo",
      ".DS_Store",
      "Thumbs.db",

      // Data files
      "*.csv",
      "*.xlsx",
      "*.sqlite",
      "*.db",
      "data/**",

      // Media files
      "*.mp4",
      "*.avi",
      "*.png",
      "*.jpg",
      "*.jpeg",
      "*.gif",

      // Archives
      "*.zip",
      "*.tar.gz",
      "*.rar",
    ];
  }

  /**
   * Create CopilotIgnore with default patterns
   * Generates secure defaults for GitHub Copilot content exclusion
   */
  static createWithDefaultPatterns(baseDir = "."): CopilotIgnore {
    const patterns = CopilotIgnore.getDefaultPatterns();

    const copilotIgnore = new CopilotIgnore({
      baseDir,
      relativeDirPath: ".github",
      relativeFilePath: "copilot-content-exclusion.yml",
      patterns,
      fileContent: "", // Will be generated
    });

    return copilotIgnore;
  }

  /**
   * Generate organization-wide configuration
   * Creates YAML for managing multiple repositories
   */
  static generateOrganizationConfig(
    configs: Array<{
      repositoryUrl: string;
      patterns: string[];
    }>,
  ): string {
    const header = [
      "# GitHub Copilot Organization/Enterprise Content Exclusion",
      "# Paste this into Organization/Enterprise Settings → Copilot → Content exclusion",
      "",
    ];

    const yamlContent = configs
      .map(({ repositoryUrl, patterns }) => {
        const lines = [`"${repositoryUrl}":`];
        patterns.forEach((pattern) => {
          lines.push(`  - "${pattern.replace(/"/g, '\\"')}"`);
        });
        return lines.join("\n");
      })
      .join("\n");

    return header.join("\n") + yamlContent;
  }

  /**
   * Get supported file extensions for Copilot configuration
   */
  static getSupportedFileExtensions(): readonly string[] {
    return [".yml", ".yaml"] as const;
  }
}

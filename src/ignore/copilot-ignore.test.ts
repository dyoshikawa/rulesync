import { writeFile } from "node:fs/promises";
import { join } from "node:path";
import { afterEach, beforeEach, describe, expect, it } from "vitest";
import { setupTestDirectory } from "../test-utils/index.js";
import { CopilotIgnore } from "./copilot-ignore.js";
import { RulesyncIgnore } from "./rulesync-ignore.js";

describe("CopilotIgnore", () => {
  let testDir: string;
  let cleanup: () => Promise<void>;

  beforeEach(async () => {
    ({ testDir, cleanup } = await setupTestDirectory());
  });

  afterEach(async () => {
    await cleanup();
  });

  describe("basic functionality", () => {
    it("should create instance with basic parameters", () => {
      const patterns = ["*.env", "secrets/", "node_modules/"];
      const ignore = new CopilotIgnore({
        baseDir: testDir,
        relativeDirPath: ".github",
        relativeFilePath: "copilot-content-exclusion.yml",
        patterns,
        fileContent: "", // Will be generated
      });

      expect(ignore.getPatterns()).toEqual(patterns);
    });

    it("should have supported file extensions", () => {
      const extensions = CopilotIgnore.getSupportedFileExtensions();
      expect(extensions).toContain(".yml");
      expect(extensions).toContain(".yaml");
    });

    it("should provide default patterns", () => {
      const patterns = CopilotIgnore.getDefaultPatterns();
      expect(patterns).toBeInstanceOf(Array);
      expect(patterns.length).toBeGreaterThan(0);

      // Should include security-sensitive patterns (highest priority)
      expect(patterns).toContain(".env*");
      expect(patterns).toContain("*.pem");
      expect(patterns).toContain("*.key");
      expect(patterns).toContain("secrets.json");

      // Should include build artifacts
      expect(patterns).toContain("build/**");
      expect(patterns).toContain("dist/**");
      expect(patterns).toContain("node_modules/**");

      // Should include media files
      expect(patterns).toContain("*.mp4");
      expect(patterns).toContain("*.png");
    });
  });

  describe("YAML content exclusion generation", () => {
    it("should generate simple repository-level YAML", () => {
      const patterns = ["*.env", "secrets/", "build/"];
      const ignore = new CopilotIgnore({
        baseDir: testDir,
        relativeDirPath: ".github",
        relativeFilePath: "copilot-content-exclusion.yml",
        patterns,
        fileContent: "",
      });

      const yaml = ignore.generateContentExclusionYaml();

      expect(yaml).toBe('- "*.env"\n- "secrets/"\n- "build/"');
    });

    it("should generate organization/enterprise-level YAML", () => {
      const patterns = ["*.env", "secrets/"];
      const ignore = new CopilotIgnore({
        baseDir: testDir,
        relativeDirPath: ".github",
        relativeFilePath: "copilot-content-exclusion.yml",
        patterns,
        fileContent: "",
      });

      const repositoryUrl = "https://github.com/org/repo.git";
      const yaml = ignore.generateContentExclusionYaml(repositoryUrl);

      expect(yaml).toBe('"https://github.com/org/repo.git":\n  - "*.env"\n  - "secrets/"');
    });

    it("should escape YAML special characters", () => {
      const patterns = ['file"with"quotes', "path/with/slashes"];
      const ignore = new CopilotIgnore({
        baseDir: testDir,
        relativeDirPath: ".github",
        relativeFilePath: "copilot-content-exclusion.yml",
        patterns,
        fileContent: "",
      });

      const yaml = ignore.generateContentExclusionYaml();

      expect(yaml).toContain('"file\\"with\\"quotes"');
      expect(yaml).toContain('"path/with/slashes"');
    });

    it("should generate complete file content with header", () => {
      const patterns = ["*.env", "secrets/"];
      const ignore = new CopilotIgnore({
        baseDir: testDir,
        relativeDirPath: ".github",
        relativeFilePath: "copilot-content-exclusion.yml",
        patterns,
        fileContent: "",
      });

      const content = ignore.generateIgnoreContent();

      expect(content).toContain("# GitHub Copilot Content Exclusion Configuration");
      expect(content).toContain("# Generated by rulesync");
      expect(content).toContain("# Repository Settings → Copilot → Content exclusion");
      expect(content).toContain('- "*.env"');
      expect(content).toContain('- "secrets/"');
    });

    it("should override getFileContent to return YAML format", () => {
      const patterns = ["*.env", "build/"];
      const ignore = new CopilotIgnore({
        baseDir: testDir,
        relativeDirPath: ".github",
        relativeFilePath: "copilot-content-exclusion.yml",
        patterns,
        fileContent: "", // This should be ignored
      });

      const content = ignore.getFileContent();

      expect(content).toContain("# GitHub Copilot Content Exclusion Configuration");
      expect(content).toContain('- "*.env"');
      expect(content).toContain('- "build/"');
    });
  });

  describe("fromFilePath", () => {
    it("should read YAML config file correctly", async () => {
      const ignoreFilePath = join(testDir, "copilot-exclusions.yml");
      const patterns = ["*.env", "secrets/", "build/"];

      await writeFile(ignoreFilePath, patterns.join("\n"));

      const ignore = await CopilotIgnore.fromFilePath({ filePath: ignoreFilePath });

      expect(ignore.getPatterns()).toEqual(patterns);
    });

    it("should filter out comments and empty lines", async () => {
      const ignoreFilePath = join(testDir, "copilot-exclusions.yml");
      const fileContent = [
        "# GitHub Copilot content exclusion",
        "",
        "*.env",
        "# Secrets",
        "secrets/",
        "",
        "build/",
        "  # Another comment",
      ].join("\n");

      await writeFile(ignoreFilePath, fileContent);

      const ignore = await CopilotIgnore.fromFilePath({ filePath: ignoreFilePath });

      expect(ignore.getPatterns()).toEqual(["*.env", "secrets/", "build/"]);
    });

    it("should filter out negation patterns (not supported by Copilot)", async () => {
      const ignoreFilePath = join(testDir, "copilot-exclusions.yml");
      const fileContent = [
        "*.env",
        "!.env.example", // This should be filtered out
        "secrets/",
        "!secrets/readme.txt", // This should be filtered out
        "build/",
      ].join("\n");

      await writeFile(ignoreFilePath, fileContent);

      const ignore = await CopilotIgnore.fromFilePath({ filePath: ignoreFilePath });

      // Negation patterns should be filtered out
      expect(ignore.getPatterns()).toEqual(["*.env", "secrets/", "build/"]);
      expect(ignore.getPatterns()).not.toContain("!.env.example");
      expect(ignore.getPatterns()).not.toContain("!secrets/readme.txt");
    });
  });

  describe("fromRulesyncIgnore", () => {
    it("should convert basic patterns correctly", () => {
      const patterns = ["*.env", "secrets/", "build/"];
      const rulesyncIgnore = new RulesyncIgnore({
        baseDir: testDir,
        relativeDirPath: ".rulesync/ignore",
        relativeFilePath: "copilot.md",
        frontmatter: {
          targets: ["copilot"],
          description: "GitHub Copilot content exclusion patterns",
        },
        body: patterns.join("\n"),
        fileContent: patterns.join("\n"),
      });

      const ignore = CopilotIgnore.fromRulesyncIgnore({
        baseDir: testDir,
        relativeDirPath: ".rulesync/ignore",
        rulesyncIgnore,
      });

      expect(ignore.getPatterns()).toEqual(patterns);
    });

    it("should filter out negation patterns from rulesync body", () => {
      const patterns = ["*.env", "!.env.example", "secrets/", "!secrets/readme.txt", "build/"];
      const rulesyncIgnore = new RulesyncIgnore({
        baseDir: testDir,
        relativeDirPath: ".rulesync/ignore",
        relativeFilePath: "copilot.md",
        frontmatter: {
          targets: ["copilot"],
          description: "GitHub Copilot patterns with negations",
        },
        body: patterns.join("\n"),
        fileContent: patterns.join("\n"),
      });

      const ignore = CopilotIgnore.fromRulesyncIgnore({
        baseDir: testDir,
        relativeDirPath: ".rulesync/ignore",
        rulesyncIgnore,
      });

      // Negation patterns should be filtered out since Copilot doesn't support them
      expect(ignore.getPatterns()).toEqual(["*.env", "secrets/", "build/"]);
    });

    it("should filter out comments from rulesync body", () => {
      const body = [
        "# GitHub Copilot content exclusion patterns",
        "*.env",
        "",
        "# Secrets and credentials",
        "secrets/",
        "*.key",
      ].join("\n");

      const rulesyncIgnore = new RulesyncIgnore({
        baseDir: testDir,
        relativeDirPath: ".rulesync/ignore",
        relativeFilePath: "copilot.md",
        frontmatter: {
          targets: ["copilot"],
          description: "GitHub Copilot patterns from rulesync body",
        },
        body,
        fileContent: body,
      });

      const ignore = CopilotIgnore.fromRulesyncIgnore({
        baseDir: testDir,
        relativeDirPath: ".rulesync/ignore",
        rulesyncIgnore,
      });

      expect(ignore.getPatterns()).toEqual(["*.env", "secrets/", "*.key"]);
    });
  });

  describe("toRulesyncIgnore", () => {
    it("should convert to RulesyncIgnore correctly", () => {
      const patterns = ["*.env", "secrets/", "build/"];
      const ignore = new CopilotIgnore({
        baseDir: testDir,
        relativeDirPath: ".github",
        relativeFilePath: "copilot-content-exclusion.yml",
        patterns,
        fileContent: "",
      });

      const rulesyncIgnore = ignore.toRulesyncIgnore();

      expect(rulesyncIgnore.getBody()).toBe(patterns.join("\n"));
      expect(rulesyncIgnore.getFrontmatter().targets).toEqual(["copilot"]);
      expect(rulesyncIgnore.getFrontmatter().description).toContain(
        "GitHub Copilot content exclusion",
      );
    });
  });

  describe("createWithDefaultPatterns", () => {
    it("should create instance with default patterns", () => {
      const ignore = CopilotIgnore.createWithDefaultPatterns(testDir);

      const patterns = ignore.getPatterns();
      const defaultPatterns = CopilotIgnore.getDefaultPatterns();

      expect(patterns).toEqual(defaultPatterns);
    });

    it("should generate proper YAML content", () => {
      const ignore = CopilotIgnore.createWithDefaultPatterns(testDir);

      const content = ignore.getFileContent();
      expect(content).toContain("# GitHub Copilot Content Exclusion Configuration");
      expect(content).toContain('- ".env*"');
      expect(content).toContain('- "secrets.json"');
    });
  });

  describe("generateOrganizationConfig", () => {
    it("should generate organization-wide configuration", () => {
      const configs = [
        {
          repositoryUrl: "https://github.com/org/repo1.git",
          patterns: ["*.env", "secrets/"],
        },
        {
          repositoryUrl: "https://github.com/org/repo2.git",
          patterns: ["*.key", "build/"],
        },
      ];

      const yaml = CopilotIgnore.generateOrganizationConfig(configs);

      expect(yaml).toContain("# GitHub Copilot Organization/Enterprise Content Exclusion");
      expect(yaml).toContain('"https://github.com/org/repo1.git":');
      expect(yaml).toContain('  - "*.env"');
      expect(yaml).toContain('  - "secrets/"');
      expect(yaml).toContain('"https://github.com/org/repo2.git":');
      expect(yaml).toContain('  - "*.key"');
      expect(yaml).toContain('  - "build/"');
    });

    it("should handle special characters in repository URLs and patterns", () => {
      const configs = [
        {
          repositoryUrl: "https://github.com/org/repo-with-special-chars.git",
          patterns: ['pattern"with"quotes'],
        },
      ];

      const yaml = CopilotIgnore.generateOrganizationConfig(configs);

      expect(yaml).toContain('"https://github.com/org/repo-with-special-chars.git":');
      expect(yaml).toContain('  - "pattern\\"with\\"quotes"');
    });
  });

  describe("default patterns validation", () => {
    it("should include essential security patterns", () => {
      const patterns = CopilotIgnore.getDefaultPatterns();

      // Environment files
      expect(patterns).toContain(".env*");

      // Credentials and keys
      expect(patterns).toContain("*.pem");
      expect(patterns).toContain("*.key");
      expect(patterns).toContain("*.crt");
      expect(patterns).toContain("secrets.json");
      expect(patterns).toContain("apikeys.txt");

      // AWS specific
      expect(patterns).toContain(".aws/**");
      expect(patterns).toContain("aws-exports.js");
    });

    it("should include common development artifacts", () => {
      const patterns = CopilotIgnore.getDefaultPatterns();

      // Dependencies
      expect(patterns).toContain("node_modules/**");
      expect(patterns).toContain(".yarn/**");

      // Build outputs
      expect(patterns).toContain("build/**");
      expect(patterns).toContain("dist/**");
      expect(patterns).toContain("target/**");

      // IDE files
      expect(patterns).toContain(".vscode/**");
      expect(patterns).toContain(".idea/**");
    });

    it("should use fnmatch-compliant patterns", () => {
      const patterns = CopilotIgnore.getDefaultPatterns();

      // Should use ** for recursive matching (fnmatch style)
      const recursivePatterns = patterns.filter((p) => p.includes("**"));
      expect(recursivePatterns.length).toBeGreaterThan(0);

      // Should use * for single-level wildcards
      const wildcardPatterns = patterns.filter((p) => p.includes("*") && !p.includes("**"));
      expect(wildcardPatterns.length).toBeGreaterThan(0);
    });
  });

  describe("validation", () => {
    it("should validate successfully with valid patterns", () => {
      const ignore = new CopilotIgnore({
        baseDir: testDir,
        relativeDirPath: ".github",
        relativeFilePath: "copilot-content-exclusion.yml",
        patterns: ["*.env", "secrets/"],
        fileContent: "",
      });

      const result = ignore.validate();
      expect(result.success).toBe(true);
      expect(result.error).toBe(null);
    });

    it("should fail validation with invalid patterns", () => {
      expect(() => {
        const ignore = new CopilotIgnore({
          baseDir: testDir,
          relativeDirPath: ".github",
          relativeFilePath: "copilot-content-exclusion.yml",
          patterns: null as any,
          fileContent: "",
        });
        return ignore;
      }).toThrow();
    });

    it("should fail validation with undefined patterns", () => {
      expect(() => {
        const ignore = new CopilotIgnore({
          baseDir: testDir,
          relativeDirPath: ".github",
          relativeFilePath: "copilot-content-exclusion.yml",
          patterns: undefined as any,
          fileContent: "",
        });
        return ignore;
      }).toThrow();
    });
  });

  describe("GitHub Copilot integration patterns", () => {
    it("should handle repository-level patterns correctly", () => {
      const patterns = ["/src/some-dir/kernel.rs", "secrets.json", "*.cfg"];
      const ignore = new CopilotIgnore({
        baseDir: testDir,
        relativeDirPath: ".github",
        relativeFilePath: "copilot-content-exclusion.yml",
        patterns,
        fileContent: "",
      });

      const yaml = ignore.generateContentExclusionYaml();

      // Should be in simple list format for repository level
      expect(yaml).toBe('- "/src/some-dir/kernel.rs"\n- "secrets.json"\n- "*.cfg"');
    });

    it("should handle organization/enterprise patterns with multiple repos", () => {
      const configs = [
        {
          repositoryUrl: "*", // Global patterns
          patterns: ["/home/runner/.ssh/**", "/etc/**"],
        },
        {
          repositoryUrl: "https://github.com/org/example-repo.git",
          patterns: ["/internal/**", "private*.md"],
        },
      ];

      const yaml = CopilotIgnore.generateOrganizationConfig(configs);

      expect(yaml).toContain('"*":');
      expect(yaml).toContain('  - "/home/runner/.ssh/**"');
      expect(yaml).toContain('"https://github.com/org/example-repo.git":');
      expect(yaml).toContain('  - "/internal/**"');
    });

    it("should be compatible with GitHub Web UI format", () => {
      const patterns = ["*.log", "build/**", "/config/secrets/*"];
      const ignore = new CopilotIgnore({
        baseDir: testDir,
        relativeDirPath: ".github",
        relativeFilePath: "copilot-content-exclusion.yml",
        patterns,
        fileContent: "",
      });

      const content = ignore.getFileContent();

      // Should include instructions for Web UI
      expect(content).toContain("paste this into GitHub Web UI");
      expect(content).toContain("Repository Settings → Copilot → Content exclusion");

      // Should be valid YAML format
      expect(content).toContain('- "*.log"');
      expect(content).toContain('- "build/**"');
      expect(content).toContain('- "/config/secrets/*"');
    });
  });

  describe("fnmatch compliance", () => {
    it("should support case insensitive patterns (Copilot spec)", () => {
      const patterns = ["*.LOG", "BUILD/", "Secrets/"];
      const ignore = new CopilotIgnore({
        baseDir: testDir,
        relativeDirPath: ".github",
        relativeFilePath: "copilot-content-exclusion.yml",
        patterns,
        fileContent: "",
      });

      // Patterns should be preserved as-is for case insensitive matching
      expect(ignore.getPatterns()).toEqual(patterns);

      const yaml = ignore.generateContentExclusionYaml();
      expect(yaml).toContain('"*.LOG"');
      expect(yaml).toContain('"BUILD/"');
      expect(yaml).toContain('"Secrets/"');
    });

    it("should maintain pattern format for fnmatch compatibility", () => {
      const patterns = [
        "*.{js,ts}", // Not standard fnmatch but should be preserved
        "**/*.test.*",
        "[Tt]emp/",
        "file?.txt",
      ];

      const ignore = new CopilotIgnore({
        baseDir: testDir,
        relativeDirPath: ".github",
        relativeFilePath: "copilot-content-exclusion.yml",
        patterns,
        fileContent: "",
      });

      expect(ignore.getPatterns()).toEqual(patterns);
    });
  });
});

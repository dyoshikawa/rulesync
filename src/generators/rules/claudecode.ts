import { join } from "node:path";
import { ClaudeSettingsSchema } from "../../types/claudecode.js";
import type { Config, GeneratedOutput, ParsedRule } from "../../types/index.js";
import { fileExists, readFileContent, resolvePath, writeFileContent } from "../../utils/file.js";
import { type EnhancedRuleGeneratorConfig, generateComplexRules } from "./shared-helpers.js";

export async function generateClaudecodeConfig(
  rules: ParsedRule[],
  config: Config,
  baseDir?: string,
): Promise<GeneratedOutput[]> {
  const generatorConfig: EnhancedRuleGeneratorConfig = {
    tool: "claudecode",
    fileExtension: ".md",
    // ignoreFileName omitted - Claude Code uses settings.json permissions.deny instead of ignore files
    generateContent: generateMemoryFile,
    generateRootContent: generateClaudeMarkdown,
    rootFilePath: "CLAUDE.md",
    generateDetailContent: generateMemoryFile,
    detailSubDir: ".claude/memories",
    updateAdditionalConfig: async (ignorePatterns: string[], baseDir?: string) => {
      const settingsPath = resolvePath(join(".claude", "settings.json"), baseDir);

      await updateClaudeSettings(settingsPath, ignorePatterns);
      return []; // updateClaudeSettings modifies existing file, doesn't return new outputs
    },
  };

  return generateComplexRules(rules, config, generatorConfig, baseDir);
}

function generateClaudeMarkdown(
  rootRule: ParsedRule | undefined,
  detailRules: ParsedRule[],
): string {
  const lines: string[] = [];

  // Add introductory text and references to memory files at the top
  if (detailRules.length > 0) {
    lines.push("Please also reference the following documents as needed:");
    lines.push("");
    for (const rule of detailRules) {
      // Escape double quotes in description
      const escapedDescription = rule.frontmatter.description.replace(/"/g, '\\"');
      const globsText = rule.frontmatter.globs.join(",");
      lines.push(
        `@.claude/memories/${rule.filename}.md description: "${escapedDescription}" globs: "${globsText}"`,
      );
    }
    lines.push("");
  }

  // Add root rule content
  if (rootRule) {
    lines.push(rootRule.content);
    lines.push("");
  }

  return lines.join("\n");
}

function generateMemoryFile(rule: ParsedRule): string {
  return rule.content.trim();
}

async function updateClaudeSettings(settingsPath: string, ignorePatterns: string[]): Promise<void> {
  let rawSettings: unknown = {};

  // Read existing settings if file exists
  if (await fileExists(settingsPath)) {
    try {
      const content = await readFileContent(settingsPath);
      rawSettings = JSON.parse(content);
    } catch {
      console.warn(`Failed to parse existing ${settingsPath}, creating new settings`);
      rawSettings = {};
    }
  }

  // Validate and parse the settings using zod schema
  const parseResult = ClaudeSettingsSchema.safeParse(rawSettings);
  const settings = parseResult.success ? parseResult.data : ClaudeSettingsSchema.parse({});

  // Generate Read() rules for each ignore pattern
  const readDenyRules = ignorePatterns.map((pattern) => `Read(${pattern})`);

  // Ensure permissions.deny exists and is an array
  if (!settings.permissions) {
    settings.permissions = { deny: [] };
  }
  if (!Array.isArray(settings.permissions.deny)) {
    settings.permissions.deny = [];
  }

  // Remove existing Read() rules that were generated by rulesync
  const filteredDeny = settings.permissions.deny.filter((rule) => {
    // Keep non-Read rules and Read rules that don't match our patterns
    if (!rule.startsWith("Read(")) return true;

    // Extract pattern from Read(pattern)
    const match = rule.match(/^Read\((.*)\)$/);
    if (!match) return true;

    // Remove if it's one of our patterns
    return !ignorePatterns.includes(match[1] ?? "");
  });

  // Add new Read() rules
  filteredDeny.push(...readDenyRules);

  // Remove duplicates
  settings.permissions.deny = Array.from(new Set(filteredDeny));

  // Write updated settings
  const jsonContent = JSON.stringify(settings, null, 2);
  await writeFileContent(settingsPath, jsonContent);

  console.log(`âœ… Updated Claude Code settings: ${settingsPath}`);
}

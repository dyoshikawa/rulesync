import { beforeEach, describe, expect, it, vi } from "vitest";
import { createMockConfigByTool } from "../../test-utils/index.js";
import type { ParsedRule } from "../../types/index.js";
import { loadIgnorePatterns } from "../../utils/ignore.js";
import { generateRooConfig } from "./roo.js";

vi.mock("../../utils/ignore.js", () => ({
  loadIgnorePatterns: vi.fn(),
}));

describe("generateRooConfig", () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  const mockConfig = createMockConfigByTool("roo", { defaultTargets: [] });

  const mockRule: ParsedRule = {
    frontmatter: {
      root: true,
      targets: ["roo"],
      description: "Test rule",
      globs: ["**/*.ts"],
    },
    content: "Test rule content",
    filename: "test-rule",
    filepath: ".rulesync/test-rule.md",
  };

  it("should generate roo config files", async () => {
    vi.mocked(loadIgnorePatterns).mockResolvedValue({ patterns: [] });

    const outputs = await generateRooConfig([mockRule], mockConfig);

    expect(outputs).toHaveLength(1);
    expect(outputs[0]).toEqual({
      tool: "roo",
      filepath: ".roo/rules/test-rule.md",
      content: "Test rule content",
    });
  });

  it("should generate .rooignore when .rulesyncignore exists", async () => {
    vi.mocked(loadIgnorePatterns).mockResolvedValue({
      patterns: ["*.test.md", "temp/**/*"],
    });

    const outputs = await generateRooConfig([mockRule], mockConfig);

    expect(outputs).toHaveLength(2);

    // Check rule file
    expect(outputs[0]!.filepath).toBe(".roo/rules/test-rule.md");

    // Check .rooignore file
    expect(outputs[1]).toEqual({
      tool: "roo",
      filepath: ".rooignore",
      content: expect.stringContaining("# Generated by rulesync from .rulesyncignore"),
    });
    expect(outputs[1]!.content).toContain("*.test.md");
    expect(outputs[1]!.content).toContain("temp/**/*");
  });

  it("should not generate .rooignore when no ignore patterns exist", async () => {
    vi.mocked(loadIgnorePatterns).mockResolvedValue({ patterns: [] });

    const outputs = await generateRooConfig([mockRule], mockConfig);

    expect(outputs).toHaveLength(1);
    expect(outputs.every((o) => o.filepath !== ".rooignore")).toBe(true);
  });

  it("should respect baseDir parameter", async () => {
    vi.mocked(loadIgnorePatterns).mockResolvedValue({
      patterns: ["*.test.md"],
    });

    const outputs = await generateRooConfig([mockRule], mockConfig, "/custom/base");

    expect(outputs).toHaveLength(2);
    expect(outputs[0]!.filepath).toBe("/custom/base/.roo/rules/test-rule.md");
    expect(outputs[1]!.filepath).toBe("/custom/base/.rooignore");
  });
});

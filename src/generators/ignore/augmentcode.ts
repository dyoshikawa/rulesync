import { join } from "node:path";
import type { Config, GeneratedOutput, ParsedRule } from "../../types/index.js";
import {
  extractAugmentCodeIgnorePatternsFromContent,
  extractIgnorePatternsFromRules,
} from "./shared-helpers.js";

export async function generateAugmentCodeIgnoreFiles(
  rules: ParsedRule[],
  config: Config,
  baseDir?: string,
): Promise<GeneratedOutput[]> {
  const outputs: GeneratedOutput[] = [];

  const augmentignoreContent = generateAugmentignoreContent(rules);
  const outputPath = baseDir || process.cwd();
  const filepath = join(outputPath, ".augmentignore");

  outputs.push({
    tool: "augmentcode",
    filepath,
    content: augmentignoreContent,
  });

  return outputs;
}

function generateAugmentignoreContent(rules: ParsedRule[]): string {
  const lines: string[] = [
    "# Generated by rulesync - AugmentCode ignore patterns",
    "# AugmentCode uses a two-tier approach: .gitignore first, then .augmentignore",
    "# This file provides Augment-specific exclusions and re-inclusions",
    "",
  ];

  // Add security and secrets exclusions
  lines.push(
    "# Security and Secrets (critical exclusions)",
    "# Environment files",
    ".env*",
    "",
    "# Private keys and certificates",
    "*.pem",
    "*.key",
    "*.p12",
    "*.crt",
    "*.der",
    "",
    "# SSH keys",
    "id_rsa*",
    "id_dsa*",
    "",
    "# AWS credentials",
    ".aws/",
    "aws-exports.js",
    "",
    "# API keys and tokens",
    "**/apikeys/",
    "**/*_token*",
    "**/*_secret*",
    "",
  );

  // Add build artifacts and dependencies
  lines.push(
    "# Build Artifacts and Dependencies",
    "# Build outputs",
    "dist/",
    "build/",
    "out/",
    "target/",
    "",
    "# Dependencies",
    "node_modules/",
    "venv/",
    "*.egg-info/",
    "",
    "# Logs",
    "*.log",
    "logs/",
    "",
    "# Temporary files",
    "*.tmp",
    "*.swp",
    "*.swo",
    "*~",
    "",
  );

  // Add large files and media
  lines.push(
    "# Large Files and Media",
    "# Binary files",
    "*.jar",
    "*.png",
    "*.jpg",
    "*.jpeg",
    "*.gif",
    "*.mp4",
    "*.avi",
    "*.zip",
    "*.tar.gz",
    "*.rar",
    "",
    "# Database files",
    "*.sqlite",
    "*.db",
    "*.mdb",
    "",
    "# Data files",
    "*.csv",
    "*.tsv",
    "*.xlsx",
    "",
  );

  // Add performance optimization patterns
  lines.push(
    "# Performance Optimization",
    "# Exclude files that are too large for effective AI processing",
    "**/*.{mp4,avi,mov,mkv}",
    "**/*.{zip,tar,gz,rar}",
    "**/*.{pdf,doc,docx}",
    "**/logs/**/*.log",
    "",
    "# But include small configuration files",
    "!**/config.{json,yaml,yml}",
    "",
  );

  // Add patterns from rules
  const rulePatterns = extractIgnorePatternsFromRules(rules);

  // Extract AugmentCode-specific patterns from rule content
  const augmentPatterns: string[] = [];
  for (const rule of rules) {
    augmentPatterns.push(...extractAugmentCodeIgnorePatternsFromContent(rule.content));
  }

  const allPatterns = [...rulePatterns, ...augmentPatterns];
  if (allPatterns.length > 0) {
    lines.push("# Project-specific patterns from rulesync rules");
    lines.push(...allPatterns);
    lines.push("");
  }

  // Add team collaboration patterns
  lines.push(
    "# Team Collaboration",
    "# Exclude personal IDE settings",
    ".vscode/settings.json",
    ".idea/workspace.xml",
    "",
    "# But include shared team settings",
    "!.vscode/extensions.json",
    "!.idea/codeStyles/",
    "",
    "# Exclude test fixtures with sensitive data",
    "tests/fixtures/real-data/**",
    "",
    "# Re-include important documentation",
    "!vendor/*/README.md",
    "!third-party/*/LICENSE",
    "",
  );

  return lines.join("\n");
}

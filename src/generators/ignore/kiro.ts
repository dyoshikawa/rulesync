import { join } from "node:path";
import type { Config, GeneratedOutput, ParsedRule } from "../../types/index.js";
import { extractIgnorePatternsFromRules } from "./shared-helpers.js";

export async function generateKiroIgnoreFiles(
  rules: ParsedRule[],
  config: Config,
  baseDir?: string,
): Promise<GeneratedOutput[]> {
  const outputs: GeneratedOutput[] = [];

  const aiignoreContent = generateAiignoreContent(rules);
  const outputPath = baseDir || process.cwd();
  const filepath = join(outputPath, ".aiignore");

  outputs.push({
    tool: "kiro",
    filepath,
    content: aiignoreContent,
  });

  return outputs;
}

function generateAiignoreContent(rules: ParsedRule[]): string {
  const lines: string[] = [
    "# Generated by rulesync - Kiro AI-specific exclusions",
    "# This file excludes files that can be in Git but shouldn't be read by the AI",
    "",
  ];

  // Add common AI exclusion patterns based on Kiro specification
  lines.push(
    "# Data files AI shouldn't process",
    "*.csv",
    "*.tsv",
    "*.sqlite",
    "*.db",
    "",
    "# Large binary files",
    "*.zip",
    "*.tar.gz",
    "*.rar",
    "",
    "# Sensitive documentation",
    "internal-docs/",
    "confidential/",
    "",
    "# Test data that might confuse AI",
    "test/fixtures/large-*.json",
    "benchmark-results/",
    "",
    "# Reinforce critical exclusions from .gitignore",
    "*.pem",
    "*.key",
    ".env*",
    "",
  );

  // Add patterns from rules with specific formatting for ignore files
  const rulePatterns = extractIgnorePatternsFromRules(rules);
  if (rulePatterns.length > 0) {
    lines.push("# Project-specific exclusions from rulesync rules");
    lines.push(...rulePatterns);
    lines.push("");
  }

  return lines.join("\n");
}

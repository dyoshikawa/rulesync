import type { Config, GeneratedOutput, ParsedRule } from "../../types/index.js";
import { generateIgnoreFile, type IgnoreFileConfig } from "./shared-factory.js";

/**
 * Windsurf ignore file configuration
 * Uses .codeiumignore file for AI analysis exclusions
 */
const windsurfIgnoreConfig: IgnoreFileConfig = {
  tool: "windsurf",
  filename: ".codeiumignore",
  header: [
    "# Generated by rulesync - Windsurf AI Code Editor ignore file",
    "# This file controls which files are excluded from Cascade AI analysis and context",
    "# Uses same syntax as .gitignore patterns",
    "# Note: Git-ignored files are automatically excluded by Windsurf",
  ],
  corePatterns: [
    "# ───── Security & Credentials (Critical) ─────",
    "# Environment files",
    ".env*",
    "!.env.example",
    "",
    "# Private keys and certificates",
    "*.pem",
    "*.key",
    "*.crt",
    "*.p12",
    "*.pfx",
    "*.der",
    "",
    "# SSH keys",
    "id_rsa*",
    "id_dsa*",
    "*.ppk",
    "",
    "# API keys and tokens",
    "**/apikeys/",
    "**/*_token*",
    "**/*_secret*",
    "**/*api_key*",
    "",
    "# Cloud provider credentials",
    "aws-credentials.json",
    "gcp-service-account*.json",
    "azure-credentials.json",
    "",
    "# ───── Database & Configuration Files ─────",
    "# Database files",
    "*.db",
    "*.sqlite",
    "*.sqlite3",
    "",
    "# Configuration files with secrets",
    "config/secrets/",
    "**/database.yml",
    "",
    "# ───── Build Artifacts & Dependencies ─────",
    "# Build outputs",
    "dist/",
    "build/",
    "out/",
    "target/",
    "",
    "# Dependencies (already auto-excluded but reinforced)",
    "node_modules/",
    ".pnpm-store/",
    ".yarn/",
    "vendor/",
    "",
    "# ───── Cache & Temporary Files ─────",
    "# Cache directories",
    ".cache/",
    ".parcel-cache/",
    ".next/cache/",
    "",
    "# Temporary files",
    "*.tmp",
    "*.swp",
    "*.swo",
    "*~",
    "",
    "# ───── Large Data Files ─────",
    "# Data files",
    "*.csv",
    "*.xlsx",
    "*.json",
    "data/",
    "datasets/",
    "",
    "# Media files",
    "*.mp4",
    "*.avi",
    "*.mov",
    "*.png",
    "*.jpg",
    "*.jpeg",
    "*.gif",
    "",
    "# Archives",
    "*.zip",
    "*.tar.gz",
    "*.rar",
    "",
    "# ───── IDE & Editor Files ─────",
    "# IDE settings (personal)",
    ".vscode/settings.json",
    ".idea/",
    "",
    "# Editor temporary files",
    "*.swp",
    "*.swo",
    "",
    "# ───── Test Coverage & Logs ─────",
    "# Test coverage reports",
    "coverage/",
    ".nyc_output/",
    "",
    "# Logs",
    "*.log",
    "",
    "# ───── Re-include Important Files ─────",
    "# Allow configuration examples",
    "!.env.example",
    "!config/*.example.*",
    "",
    "# Allow documentation",
    "!docs/**/*.md",
    "!README.md",
  ],
  includeCommonPatterns: false,
  projectPatternsHeader: "# ───── Project-specific patterns from rulesync rules ─────",
};

/**
 * Generate Windsurf ignore file (.codeiumignore)
 *
 * @param rules - Parsed rules from AI rule files
 * @param config - Global configuration
 * @param baseDir - Optional base directory for output (defaults to cwd)
 * @returns Array of generated output files
 */
export function generateWindsurfIgnore(
  rules: ParsedRule[],
  config: Config,
  baseDir?: string,
): GeneratedOutput[] {
  return generateIgnoreFile(rules, config, windsurfIgnoreConfig, baseDir);
}

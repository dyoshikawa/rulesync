import { describe, expect, it } from "vitest";
import type { Config, ParsedRule } from "../../types/index.js";
import { generateJunieIgnoreFiles } from "./junie.js";

describe("generateJunieIgnoreFiles", () => {
  const mockConfig: Config = {
    aiRulesDir: ".rulesync",
    outputPaths: {
      augmentcode: "./.augment/rules",
      "augmentcode-legacy": "./.augment-guidelines",
      copilot: "./.github/copilot-instructions.md",
      cursor: "./.cursor/rules",
      cline: "./.clinerules",
      claudecode: "./CLAUDE.md",
      codexcli: "./codex.md",
      roo: "./.roo/rules",
      geminicli: "./GEMINI.md",
      kiro: "./.kiro/steering",
      junie: "./.junie/guidelines.md",
    },
    watchEnabled: false,
    defaultTargets: ["junie"],
  };

  it("should generate .aiignore file with basic content", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateJunieIgnoreFiles(rules, mockConfig);

    expect(outputs).toHaveLength(1);
    expect(outputs[0]?.tool).toBe("junie");
    expect(outputs[0]?.filepath).toMatch(/\.aiignore$/);
    expect(outputs[0]?.content).toContain(
      "# Generated by rulesync - JetBrains Junie AI ignore file",
    );
  });

  it("should include security-critical patterns", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateJunieIgnoreFiles(rules, mockConfig);

    const content = outputs[0]?.content || "";

    // Check for secrets and credentials
    expect(content).toContain("*.pem");
    expect(content).toContain("*.key");
    expect(content).toContain(".env");
    expect(content).toContain("secrets/**");

    // Check for infrastructure
    expect(content).toContain("*.tfstate");
    expect(content).toContain("**/k8s/**/secret*.yaml");

    // Check for build artifacts
    expect(content).toContain("/dist/");
    expect(content).toContain("/build/");
    expect(content).toContain("node_modules/");
  });

  it("should include framework-specific patterns", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateJunieIgnoreFiles(rules, mockConfig);

    const content = outputs[0]?.content || "";

    // Node.js patterns
    expect(content).toContain("node_modules/");
    expect(content).toContain(".next/");
    expect(content).toContain(".nuxt/");

    // Python patterns
    expect(content).toContain("__pycache__/");
    expect(content).toContain("venv/");
    expect(content).toContain("*.pyc");

    // Java patterns
    expect(content).toContain("*.class");
    expect(content).toContain("*.jar");
    expect(content).toContain("target/");
  });

  it("should include data and log exclusions", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateJunieIgnoreFiles(rules, mockConfig);

    const content = outputs[0]?.content || "";

    expect(content).toContain("*.log");
    expect(content).toContain("*.csv");
    expect(content).toContain("*.xlsx");
    expect(content).toContain("*.sqlite");
    expect(content).toContain("data/");
    expect(content).toContain("datasets/");
  });

  it("should include allowlist examples as comments", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateJunieIgnoreFiles(rules, mockConfig);

    const content = outputs[0]?.content || "";

    expect(content).toContain("# !src/**/*.ts");
    expect(content).toContain("# !src/**/*.js");
    expect(content).toContain("# !lib/**/*.py");
    expect(content).toContain("# !src/main/**/*.java");
  });

  it("should add patterns from rules", async () => {
    const rules: ParsedRule[] = [
      {
        filename: "test.md",
        filepath: "/test/test.md",
        frontmatter: {
          root: false,
          targets: ["junie"],
          description: "Test rule",
          globs: ["**/confidential/**", "**/internal-docs/**"],
        },
        content: "# Test rule content",
      },
    ];

    const outputs = await generateJunieIgnoreFiles(rules, mockConfig);
    const content = outputs[0]?.content || "";

    expect(content).toContain("# ───── Project-specific exclusions from rulesync rules ─────");
    expect(content).toContain("**/confidential/**");
    expect(content).toContain("**/internal-docs/**");
  });

  it("should use custom base directory when provided", async () => {
    const rules: ParsedRule[] = [];
    const customBaseDir = "/custom/path";
    const outputs = await generateJunieIgnoreFiles(rules, mockConfig, customBaseDir);

    expect(outputs[0]?.filepath).toBe("/custom/path/.aiignore");
  });

  it("should include proper sectioning with separators", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateJunieIgnoreFiles(rules, mockConfig);

    const content = outputs[0]?.content || "";

    expect(content).toContain("# ───── Source Control Metadata ─────");
    expect(content).toContain("# ───── Build Artifacts ─────");
    expect(content).toContain("# ───── Secrets & Credentials ─────");
    expect(content).toContain("# ───── Infrastructure & Deployment ─────");
    expect(content).toContain("# ───── Logs & Runtime Data ─────");
    expect(content).toContain("# ───── Large Data Files ─────");
  });

  it("should include negation patterns for env.example", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateJunieIgnoreFiles(rules, mockConfig);

    const content = outputs[0]?.content || "";

    expect(content).toContain(".env.*");
    expect(content).toContain("!.env.example");
  });
});

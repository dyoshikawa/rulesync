import { describe, expect, it } from "vitest";
import type { Config, ParsedRule } from "../../types/index.js";
import { generateCodexCliIgnoreFiles } from "./codexcli.js";

describe("generateCodexCliIgnoreFiles", () => {
  const mockConfig: Config = {
    aiRulesDir: ".rulesync",
    outputPaths: {
      augmentcode: "./.augment/rules",
      "augmentcode-legacy": "./.augment-guidelines",
      copilot: "./.github/copilot-instructions.md",
      cursor: "./.cursor/rules",
      cline: "./.clinerules",
      claudecode: "./CLAUDE.md",
      codexcli: "./codex.md",
      roo: "./.roo/rules",
      geminicli: "./GEMINI.md",
      kiro: "./.kiro/steering",
      junie: "./.junie/guidelines.md",
    },
    watchEnabled: false,
    defaultTargets: ["codexcli"],
  };

  it("should generate .codexignore file with basic content", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateCodexCliIgnoreFiles(rules, mockConfig);

    expect(outputs).toHaveLength(1);
    expect(outputs[0]?.tool).toBe("codexcli");
    expect(outputs[0]?.filepath).toMatch(/\.codexignore$/);
    expect(outputs[0]?.content).toContain("# Generated by rulesync - OpenAI Codex CLI ignore file");
  });

  it("should include community feature note in header", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateCodexCliIgnoreFiles(rules, mockConfig);

    const content = outputs[0]?.content || "";

    expect(content).toContain(
      "# Note: .codexignore is a community-requested feature (GitHub Issue #205)",
    );
    expect(content).toContain("# Currently using proposed syntax based on .gitignore patterns");
  });

  it("should include security-critical patterns", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateCodexCliIgnoreFiles(rules, mockConfig);

    const content = outputs[0]?.content || "";

    // Environment files
    expect(content).toContain(".env");
    expect(content).toContain(".env.*");
    expect(content).toContain("!.env.example");

    // Private keys and certificates
    expect(content).toContain("*.key");
    expect(content).toContain("*.pem");
    expect(content).toContain("*.p12");
    expect(content).toContain("*.pfx");

    // SSH keys
    expect(content).toContain("id_rsa*");
    expect(content).toContain("id_dsa*");
    expect(content).toContain("*.ppk");

    // API keys and secrets
    expect(content).toContain("api-keys.json");
    expect(content).toContain("credentials.json");
    expect(content).toContain("secrets.json");
    expect(content).toContain("**/apikeys/");
    expect(content).toContain("**/*_token*");
    expect(content).toContain("**/*_secret*");
  });

  it("should include cloud provider credentials", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateCodexCliIgnoreFiles(rules, mockConfig);

    const content = outputs[0]?.content || "";

    expect(content).toContain("aws-credentials.json");
    expect(content).toContain("gcp-service-account*.json");
    expect(content).toContain("azure-credentials.json");
    expect(content).toContain(".aws/");
  });

  it("should include database and infrastructure secrets", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateCodexCliIgnoreFiles(rules, mockConfig);

    const content = outputs[0]?.content || "";

    // Database configuration
    expect(content).toContain("*.db");
    expect(content).toContain("*.sqlite");
    expect(content).toContain("database.yml");
    expect(content).toContain("**/database/config.*");

    // Infrastructure as Code
    expect(content).toContain("*.tfstate");
    expect(content).toContain("terraform.tfvars");
    expect(content).toContain("secrets.auto.tfvars");
    expect(content).toContain(".terraform/");

    // Kubernetes secrets
    expect(content).toContain("**/k8s/**/secret*.yaml");
    expect(content).toContain("**/kubernetes/**/secret*.yaml");
  });

  it("should include business sensitive data patterns", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateCodexCliIgnoreFiles(rules, mockConfig);

    const content = outputs[0]?.content || "";

    // Sensitive directories
    expect(content).toContain("secrets/");
    expect(content).toContain("private/");
    expect(content).toContain("confidential/");
    expect(content).toContain("internal-docs/");

    // Customer and personal data
    expect(content).toContain("customer-data/");
    expect(content).toContain("pii/");
    expect(content).toContain("personal-data/");
    expect(content).toContain("**/*customer*.csv");
    expect(content).toContain("**/*personal*.json");
  });

  it("should include build artifacts and large files", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateCodexCliIgnoreFiles(rules, mockConfig);

    const content = outputs[0]?.content || "";

    // Build outputs
    expect(content).toContain("dist/");
    expect(content).toContain("build/");
    expect(content).toContain("out/");
    expect(content).toContain(".next/");
    expect(content).toContain(".nuxt/");

    // Large files
    expect(content).toContain("*.zip");
    expect(content).toContain("*.tar.gz");
    expect(content).toContain("**/*.{mp4,avi,mov,mkv}");
    expect(content).toContain("**/*.{pdf,doc,docx}");

    // Data files
    expect(content).toContain("*.csv");
    expect(content).toContain("*.xlsx");
    expect(content).toContain("data/");
    expect(content).toContain("datasets/");
  });

  it("should include development environment patterns", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateCodexCliIgnoreFiles(rules, mockConfig);

    const content = outputs[0]?.content || "";

    // Personal IDE settings
    expect(content).toContain(".vscode/settings.json");
    expect(content).toContain(".idea/workspace.xml");

    // Temporary files
    expect(content).toContain("*.swp");
    expect(content).toContain("*.swo");
    expect(content).toContain("*~");
    expect(content).toContain("*.tmp");

    // Test data
    expect(content).toContain("test-data/sensitive/");
    expect(content).toContain("tests/fixtures/real-data/**");
  });

  it("should include re-inclusion patterns", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateCodexCliIgnoreFiles(rules, mockConfig);

    const content = outputs[0]?.content || "";

    expect(content).toContain("!secrets/README.md");
    expect(content).toContain("!config/*.example.*");
    expect(content).toContain("!docs/**/*.md");
  });

  it("should include proper sectioning with Codex CLI specific headers", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateCodexCliIgnoreFiles(rules, mockConfig);

    const content = outputs[0]?.content || "";

    expect(content).toContain("# ───── Security & Credentials (Critical) ─────");
    expect(content).toContain("# ───── Database & Infrastructure Secrets ─────");
    expect(content).toContain("# ───── Business Sensitive Data ─────");
    expect(content).toContain("# ───── Build Artifacts & Large Files ─────");
    expect(content).toContain("# ───── Development Environment ─────");
    expect(content).toContain("# ───── Logs & Runtime Data ─────");
    expect(content).toContain("# ───── Re-include Important Files ─────");
  });

  it("should add patterns from rules", async () => {
    const rules: ParsedRule[] = [
      {
        filename: "test.md",
        filepath: "/test/test.md",
        frontmatter: {
          root: false,
          targets: ["codexcli"],
          description: "Test rule",
          globs: ["**/confidential/**", "**/internal-docs/**"],
        },
        content: "# Test rule content",
      },
    ];

    const outputs = await generateCodexCliIgnoreFiles(rules, mockConfig);
    const content = outputs[0]?.content || "";

    expect(content).toContain("# ───── Project-specific patterns from rulesync rules ─────");
    expect(content).toContain("**/confidential/**");
    expect(content).toContain("**/internal-docs/**");
  });

  it("should use custom base directory when provided", async () => {
    const rules: ParsedRule[] = [];
    const customBaseDir = "/custom/path";
    const outputs = await generateCodexCliIgnoreFiles(rules, mockConfig, customBaseDir);

    expect(outputs[0]?.filepath).toBe("/custom/path/.codexignore");
  });

  it("should not include common patterns (includeCommonPatterns: false)", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateCodexCliIgnoreFiles(rules, mockConfig);

    const content = outputs[0]?.content || "";

    // Should not include common patterns header since includeCommonPatterns is false
    expect(content).not.toContain("# ───── Source Control Metadata ─────");

    // But should include the Codex CLI specific patterns
    expect(content).toContain("# ───── Security & Credentials (Critical) ─────");
  });

  it("should handle empty rules gracefully", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateCodexCliIgnoreFiles(rules, mockConfig);

    expect(outputs).toHaveLength(1);
    expect(outputs[0]?.content).toBeTruthy();
    expect(outputs[0]?.content).toContain("# Generated by rulesync - OpenAI Codex CLI ignore file");
  });

  it("should include logs and runtime data patterns", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateCodexCliIgnoreFiles(rules, mockConfig);

    const content = outputs[0]?.content || "";

    expect(content).toContain("*.log");
    expect(content).toContain("logs/");
    expect(content).toContain(".cache/");
  });
});

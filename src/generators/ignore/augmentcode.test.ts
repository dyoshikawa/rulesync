import { describe, expect, it } from "vitest";
import type { Config, ParsedRule } from "../../types/index.js";
import { generateAugmentCodeIgnoreFiles } from "./augmentcode.js";

describe("generateAugmentCodeIgnoreFiles", () => {
  const mockConfig: Config = {
    aiRulesDir: "rules",
    outputPaths: {
      augmentcode: "output",
      claudecode: "output",
      cline: "output",
      copilot: "output",
      cursor: "output",
      geminicli: "output",
      kiro: "output",
      roo: "output",
    },
    watchEnabled: false,
    defaultTargets: ["augmentcode"],
  };

  it("should generate .augmentignore file with default patterns", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateAugmentCodeIgnoreFiles(rules, mockConfig);

    expect(outputs).toHaveLength(1);
    expect(outputs[0]?.tool).toBe("augmentcode");
    expect(outputs[0]?.filepath).toMatch(/\.augmentignore$/);

    const content = outputs[0]?.content;
    expect(content).toContain("# Generated by rulesync - AugmentCode ignore patterns");
    expect(content).toContain("# Security and Secrets");
    expect(content).toContain(".env*");
    expect(content).toContain("*.pem");
    expect(content).toContain("*.key");
    expect(content).toContain("# Build Artifacts and Dependencies");
    expect(content).toContain("node_modules/");
    expect(content).toContain("dist/");
    expect(content).toContain("# Large Files and Media");
    expect(content).toContain("*.mp4");
    expect(content).toContain("*.zip");
    expect(content).toContain("# Performance Optimization");
    expect(content).toContain("**/*.{mp4,avi,mov,mkv}");
    expect(content).toContain("!**/config.{json,yaml,yml}");
    expect(content).toContain("# Team Collaboration");
    expect(content).toContain("!.vscode/extensions.json");
  });

  it("should include patterns from rules with sensitive globs", async () => {
    const rules: ParsedRule[] = [
      {
        filepath: "test-rule.md",
        filename: "test-rule.md",
        frontmatter: {
          root: false,
          targets: ["augmentcode"],
          description: "Test rule with sensitive patterns",
          globs: ["**/internal-docs/**", "**/config/secrets/**"],
        },
        content: "Test rule content",
      },
    ];

    const outputs = await generateAugmentCodeIgnoreFiles(rules, mockConfig);
    const content = outputs[0]?.content;

    expect(content).toContain("# Project-specific patterns from rulesync rules");
    expect(content).toContain("# Exclude: Test rule with sensitive patterns");
    expect(content).toContain("**/internal-docs/**");
    expect(content).toContain("**/config/secrets/**");
  });

  it("should extract AugmentCode-specific patterns from rule content", async () => {
    const rules: ParsedRule[] = [
      {
        filepath: "test-rule.md",
        filename: "test-rule.md",
        frontmatter: {
          root: false,
          targets: ["augmentcode"],
          description: "Test rule with content patterns",
          globs: ["**/*.ts"],
        },
        content: [
          "# AUGMENT_IGNORE: custom-pattern/**",
          "# augmentignore: *.temp",
          "# AUGMENT_INCLUDE: important-config.json",
          "# augmentinclude: docs/api/**",
          "This rule mentions large file patterns like 'data.mp4' and 'archive.zip'",
        ].join("\n"),
      },
    ];

    const outputs = await generateAugmentCodeIgnoreFiles(rules, mockConfig);
    const content = outputs[0]?.content;

    expect(content).toContain("custom-pattern/**");
    expect(content).toContain("*.temp");
    expect(content).toContain("!important-config.json");
    expect(content).toContain("!docs/api/**");
    expect(content).toContain("data.mp4");
    expect(content).toContain("archive.zip");
  });

  it("should use custom base directory when provided", async () => {
    const rules: ParsedRule[] = [];
    const baseDir = "/custom/output/dir";
    const outputs = await generateAugmentCodeIgnoreFiles(rules, mockConfig, baseDir);

    expect(outputs[0]?.filepath).toBe("/custom/output/dir/.augmentignore");
  });

  it("should handle empty rules gracefully", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateAugmentCodeIgnoreFiles(rules, mockConfig);

    expect(outputs).toHaveLength(1);
    expect(outputs[0]?.content).toContain("# Generated by rulesync");
    expect(outputs[0]?.content).not.toContain("# Project-specific patterns from rulesync rules");
  });

  it("should include re-inclusion patterns for team collaboration", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateAugmentCodeIgnoreFiles(rules, mockConfig);
    const content = outputs[0]?.content;

    // Check for negation patterns (re-inclusions)
    expect(content).toContain("!**/config.{json,yaml,yml}");
    expect(content).toContain("!.vscode/extensions.json");
    expect(content).toContain("!.idea/codeStyles/");
    expect(content).toContain("!vendor/*/README.md");
    expect(content).toContain("!third-party/*/LICENSE");
  });

  it("should exclude performance-impacting patterns", async () => {
    const rules: ParsedRule[] = [];
    const outputs = await generateAugmentCodeIgnoreFiles(rules, mockConfig);
    const content = outputs[0]?.content;

    // Check for performance optimization patterns
    expect(content).toContain("**/*.{mp4,avi,mov,mkv}");
    expect(content).toContain("**/*.{zip,tar,gz,rar}");
    expect(content).toContain("**/*.{pdf,doc,docx}");
    expect(content).toContain("**/logs/**/*.log");
  });

  it("should not include non-sensitive globs from rules", async () => {
    const rules: ParsedRule[] = [
      {
        filepath: "test-rule.md",
        filename: "test-rule.md",
        frontmatter: {
          root: false,
          targets: ["augmentcode"],
          description: "Test rule with non-sensitive patterns",
          globs: ["src/**/*.ts", "docs/**/*.md", "README.md"],
        },
        content: "Test rule content",
      },
    ];

    const outputs = await generateAugmentCodeIgnoreFiles(rules, mockConfig);
    const content = outputs[0]?.content;

    // Non-sensitive patterns should not be included as exclusions from project-specific rules
    expect(content).not.toContain("# Project-specific patterns from rulesync rules");
    expect(content).not.toContain("# Exclude: Test rule with non-sensitive patterns");

    // The basic ignore patterns should still be present
    expect(content).toContain("# Generated by rulesync");
    expect(content).toContain(".env*");
  });

  it("should handle rules without globs", async () => {
    const rules: ParsedRule[] = [
      {
        filepath: "test-rule.md",
        filename: "test-rule.md",
        frontmatter: {
          root: false,
          targets: ["augmentcode"],
          description: "Test rule without globs",
          globs: [],
        },
        content: "Test rule content without patterns",
      },
    ];

    const outputs = await generateAugmentCodeIgnoreFiles(rules, mockConfig);
    const content = outputs[0]?.content;

    expect(content).toContain("# Generated by rulesync");
    expect(content).not.toContain("# Project-specific patterns from rulesync rules");
  });
});

import { describe, expect, it } from "vitest";
import { createMockConfigByTool } from "../../test-utils/index.js";
import type { ParsedRule } from "../../types/index.js";
import { generateKiroIgnoreFiles } from "./kiro.js";

describe("generateKiroIgnoreFiles", () => {
  const mockConfig = createMockConfigByTool("kiro");

  const mockRule: ParsedRule = {
    frontmatter: {
      root: false,
      targets: ["kiro"],
      description: "Security guidelines",
      globs: ["**/*.ts"],
    },
    content: "# Security Guidelines\n\n- Never hardcode API keys\n- Use environment variables",
    filename: "security-guidelines",
    filepath: ".rulesync/security-guidelines.md",
  };

  it("should generate .aiignore file in project root", async () => {
    const outputs = await generateKiroIgnoreFiles([mockRule], mockConfig);

    expect(outputs).toHaveLength(1);
    expect(outputs[0]?.tool).toBe("kiro");
    expect(outputs[0]?.filepath).toMatch(/\.aiignore$/);
    expect(outputs[0]?.content).toContain("# Generated by rulesync - Kiro AI-specific exclusions");
  });

  it("should include common AI exclusion patterns", async () => {
    const outputs = await generateKiroIgnoreFiles([mockRule], mockConfig);

    const content = outputs[0]?.content || "";

    // Check for common AI exclusion patterns from specification
    expect(content).toContain("*.csv");
    expect(content).toContain("*.sqlite");
    expect(content).toContain("*.zip");
    expect(content).toContain("internal-docs/");
    expect(content).toContain("test/fixtures/large-*.json");
    expect(content).toContain("*.pem");
    expect(content).toContain("*.key");
    expect(content).toContain(".env*");
  });

  it("should respect baseDir parameter", async () => {
    const outputs = await generateKiroIgnoreFiles([mockRule], mockConfig, "/custom/base");

    expect(outputs).toHaveLength(1);
    expect(outputs[0]?.filepath).toBe("/custom/base/.aiignore");
  });

  it("should handle multiple rules", async () => {
    const mockRules: ParsedRule[] = [
      {
        frontmatter: {
          root: false,
          targets: ["kiro"],
          description: "Security guidelines",
          globs: ["**/*.ts"],
        },
        content: "# Security Guidelines\n\nSecurity rules here",
        filename: "security",
        filepath: ".rulesync/security.md",
      },
      {
        frontmatter: {
          root: false,
          targets: ["kiro"],
          description: "Deployment process",
          globs: ["**/config/production/**"],
        },
        content: "# Deployment Process\n\nDeployment steps here",
        filename: "deployment",
        filepath: ".rulesync/deployment.md",
      },
    ];

    const outputs = await generateKiroIgnoreFiles(mockRules, mockConfig);

    expect(outputs).toHaveLength(1);

    const content = outputs[0]?.content || "";
    expect(content).toContain("# Project-specific exclusions from rulesync rules");
    expect(content).toContain("**/config/production/**");
  });

  it("should handle empty rules array", async () => {
    const outputs = await generateKiroIgnoreFiles([], mockConfig);

    expect(outputs).toHaveLength(1);

    const content = outputs[0]?.content || "";
    expect(content).toContain("# Generated by rulesync - Kiro AI-specific exclusions");
    expect(content).toContain("*.csv"); // Should still include default patterns
  });

  it("should extract ignore patterns from rule content", async () => {
    const mockRuleWithIgnorePatterns: ParsedRule = {
      frontmatter: {
        root: false,
        targets: ["kiro"],
        description: "Test rule with ignore patterns",
        globs: ["**/*.ts"],
      },
      content: `# Test Rule
      
# IGNORE: secret-config.json
# aiignore: *.temp
      
This rule mentions to exclude certain files.`,
      filename: "test-rule",
      filepath: ".rulesync/test-rule.md",
    };

    const outputs = await generateKiroIgnoreFiles([mockRuleWithIgnorePatterns], mockConfig);

    const content = outputs[0]?.content || "";
    expect(content).toContain("secret-config.json");
    expect(content).toContain("*.temp");
  });

  it("should identify patterns that should be excluded from AI", async () => {
    const mockRuleWithAISensitiveGlobs: ParsedRule = {
      frontmatter: {
        root: false,
        targets: ["kiro"],
        description: "Rules with AI-sensitive patterns",
        globs: [
          "**/test/fixtures/**",
          "**/dist/**",
          "**/config/production/**",
          "**/internal/**",
          "**/*.prod.json",
        ],
      },
      content: "# Test Rule\n\nSome content here",
      filename: "ai-sensitive",
      filepath: ".rulesync/ai-sensitive.md",
    };

    const outputs = await generateKiroIgnoreFiles([mockRuleWithAISensitiveGlobs], mockConfig);

    const content = outputs[0]?.content || "";
    expect(content).toContain("**/test/fixtures/**");
    expect(content).toContain("**/dist/**");
    expect(content).toContain("**/config/production/**");
    expect(content).toContain("**/internal/**");
    expect(content).toContain("**/*.prod.json");
  });

  it("should not include regular source code patterns in AI ignore", async () => {
    const mockRuleWithSourcePatterns: ParsedRule = {
      frontmatter: {
        root: false,
        targets: ["kiro"],
        description: "Rules with source code patterns",
        globs: ["src/**/*.ts", "lib/**/*.js", "**/*.tsx"],
      },
      content: "# Source Code Rule\n\nSome content here",
      filename: "source-code",
      filepath: ".rulesync/source-code.md",
    };

    const outputs = await generateKiroIgnoreFiles([mockRuleWithSourcePatterns], mockConfig);

    const content = outputs[0]?.content || "";
    // These patterns should NOT be included as they are regular source code
    expect(content).not.toContain("src/**/*.ts");
    expect(content).not.toContain("lib/**/*.js");
    expect(content).not.toContain("**/*.tsx");
  });
});

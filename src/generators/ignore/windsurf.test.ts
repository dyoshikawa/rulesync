import { describe, expect, it } from "vitest";
import { createMockConfigWithStandardPaths } from "../../test-utils/mock-config.js";
import type { ParsedRule } from "../../types/index.js";
import { generateWindsurfIgnore } from "./windsurf.js";

describe("generateWindsurfIgnore", () => {
  const mockConfig = createMockConfigWithStandardPaths("windsurf");

  const mockRules: ParsedRule[] = [];

  it("should generate .codeiumignore file with correct filename", () => {
    const outputs = generateWindsurfIgnore(mockRules, mockConfig);

    expect(outputs).toHaveLength(1);
    expect(outputs[0]?.tool).toBe("windsurf");
    expect(outputs[0]?.filepath).toMatch(/\.codeiumignore$/);
  });

  it("should include Windsurf-specific header comments", () => {
    const outputs = generateWindsurfIgnore(mockRules, mockConfig);
    const content = outputs[0]?.content || "";

    expect(content).toContain("Generated by rulesync - Windsurf AI Code Editor ignore file");
    expect(content).toContain(
      "This file controls which files are excluded from Cascade AI analysis",
    );
    expect(content).toContain("Uses same syntax as .gitignore patterns");
    expect(content).toContain("Git-ignored files are automatically excluded by Windsurf");
  });

  it("should include security-focused patterns", () => {
    const outputs = generateWindsurfIgnore(mockRules, mockConfig);
    const content = outputs[0]?.content || "";

    // Environment files
    expect(content).toContain(".env*");
    expect(content).toContain("!.env.example");

    // Private keys and certificates
    expect(content).toContain("*.pem");
    expect(content).toContain("*.key");
    expect(content).toContain("*.crt");

    // API keys and tokens
    expect(content).toContain("**/apikeys/");
    expect(content).toContain("**/*_token*");
    expect(content).toContain("**/*_secret*");

    // Cloud credentials
    expect(content).toContain("aws-credentials.json");
    expect(content).toContain("gcp-service-account*.json");
  });

  it("should include build artifacts and dependencies", () => {
    const outputs = generateWindsurfIgnore(mockRules, mockConfig);
    const content = outputs[0]?.content || "";

    // Build outputs
    expect(content).toContain("dist/");
    expect(content).toContain("build/");
    expect(content).toContain("out/");
    expect(content).toContain("target/");

    // Dependencies
    expect(content).toContain("node_modules/");
    expect(content).toContain(".pnpm-store/");
    expect(content).toContain(".yarn/");
    expect(content).toContain("vendor/");
  });

  it("should include cache and temporary files", () => {
    const outputs = generateWindsurfIgnore(mockRules, mockConfig);
    const content = outputs[0]?.content || "";

    // Cache directories
    expect(content).toContain(".cache/");
    expect(content).toContain(".parcel-cache/");
    expect(content).toContain(".next/cache/");

    // Temporary files
    expect(content).toContain("*.tmp");
    expect(content).toContain("*.swp");
    expect(content).toContain("*.swo");
  });

  it("should include large data files exclusions", () => {
    const outputs = generateWindsurfIgnore(mockRules, mockConfig);
    const content = outputs[0]?.content || "";

    // Data files
    expect(content).toContain("*.csv");
    expect(content).toContain("*.xlsx");
    expect(content).toContain("data/");
    expect(content).toContain("datasets/");

    // Media files
    expect(content).toContain("*.mp4");
    expect(content).toContain("*.png");
    expect(content).toContain("*.jpg");

    // Archives
    expect(content).toContain("*.zip");
    expect(content).toContain("*.tar.gz");
  });

  it("should include IDE and editor files", () => {
    const outputs = generateWindsurfIgnore(mockRules, mockConfig);
    const content = outputs[0]?.content || "";

    expect(content).toContain(".vscode/settings.json");
    expect(content).toContain(".idea/");
  });

  it("should include re-inclusion patterns for important files", () => {
    const outputs = generateWindsurfIgnore(mockRules, mockConfig);
    const content = outputs[0]?.content || "";

    expect(content).toContain("!.env.example");
    expect(content).toContain("!config/*.example.*");
    expect(content).toContain("!docs/**/*.md");
    expect(content).toContain("!README.md");
  });

  it("should include project-specific patterns section header when patterns exist", () => {
    const outputs = generateWindsurfIgnore(mockRules, mockConfig);
    const content = outputs[0]?.content || "";

    // Since we don't have actual ignore patterns in the content,
    // the section header should not appear (this is correct behavior)
    // Let's just verify the basic structure is present
    expect(content).toContain("# Generated by rulesync - Windsurf AI Code Editor ignore file");
  });

  it("should use correct base directory when provided", () => {
    const baseDir = "/custom/path";
    const outputs = generateWindsurfIgnore(mockRules, mockConfig, baseDir);

    expect(outputs[0]?.filepath).toBe("/custom/path/.codeiumignore");
  });

  it("should organize patterns with clear section headers", () => {
    const outputs = generateWindsurfIgnore(mockRules, mockConfig);
    const content = outputs[0]?.content || "";

    expect(content).toContain("# ───── Security & Credentials (Critical) ─────");
    expect(content).toContain("# ───── Database & Configuration Files ─────");
    expect(content).toContain("# ───── Build Artifacts & Dependencies ─────");
    expect(content).toContain("# ───── Cache & Temporary Files ─────");
    expect(content).toContain("# ───── Large Data Files ─────");
    expect(content).toContain("# ───── IDE & Editor Files ─────");
    expect(content).toContain("# ───── Test Coverage & Logs ─────");
    expect(content).toContain("# ───── Re-include Important Files ─────");
  });

  it("should handle rules with ignore patterns extracted from content", () => {
    const outputs = generateWindsurfIgnore(mockRules, mockConfig);

    expect(outputs).toHaveLength(1);
    // Verify the basic structure is present
    expect(outputs[0]?.content).toContain(
      "# Generated by rulesync - Windsurf AI Code Editor ignore file",
    );
    expect(outputs[0]?.tool).toBe("windsurf");
  });

  it("should produce well-formatted ignore file content", () => {
    const outputs = generateWindsurfIgnore(mockRules, mockConfig);
    const content = outputs[0]?.content || "";

    // Should start with header
    expect(content).toMatch(/^# Generated by rulesync/);

    // Should have proper spacing
    expect(content).toContain("\n\n");

    // Should end with newline
    expect(content).toMatch(/\n$/);

    // Should not have double empty lines
    expect(content).not.toContain("\n\n\n");
  });
});
